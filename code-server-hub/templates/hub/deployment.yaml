apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jupyterhub.fullname" . }}-hub
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
    app.kubernetes.io/component: hub
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jupyterhub.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: hub
  strategy:
    {{- .Values.hub.deploymentStrategy | toYaml | trimSuffix "\n" | nindent 4 }}
  template:
    metadata:
      labels:
        {{- /* Changes here will cause the Deployment to restart the pods. */}}
        {{- include "jupyterhub.matchLabels" . | nindent 8 }}
        app.kubernetes.io/component: hub
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
        {{- if .Values.hub.labels }}
        {{- .Values.hub.labels | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/config-map: {{ include (print .Template.BasePath "/hub/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        {{- if .Values.hub.annotations }}
        {{- .Values.hub.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.scheduling.podPriority.enabled }}
      priorityClassName: {{ template "jupyterhub.fullname" . }}-default-priority
      {{- end }}
      nodeSelector: {{ toJson .Values.hub.nodeSelector }}
      tolerations:
        - key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
          effect: NoSchedule
        - key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
          effect: NoSchedule
        {{- with .Values.hub.tolerations }}
        {{- . | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      {{- include "jupyterhub.coreAffinity" . | nindent 6 }}
      volumes:
        - name: config
          configMap:
            name: {{ template "jupyterhub.fullname" . }}-hub-config
        - name: secret
          secret:
            secretName: {{ template "jupyterhub.fullname" . }}-hub-secret
        {{- if .Values.hub.extraFiles }}
        - name: files
          secret:
            secretName: {{ template "jupyterhub.fullname" . }}-hub-secret
            items:
              {{- range $file_key, $file_details := .Values.hub.extraFiles }}
              - key: {{ $file_key | quote }}
                path: {{ $file_key | quote }}
                {{- with $file_details.mode }}
                mode: {{ . }}
                {{- end }}
              {{- end }}
        {{- end }}
        {{- with .Values.hub.extraVolumes }}
        {{- . | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        {{- if eq .Values.hub.db.type "sqlite-pvc" }}
        - name: pvc
          persistentVolumeClaim:
            claimName: {{ include "jupyterhub.hub-pvc.fullname" . }}
        {{- end }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ template "jupyterhub.fullname" . }}-hub
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.hub.fsGid }}
        runAsUser: {{ .Values.hub.uid }}
        runAsGroup: {{ .Values.hub.fsGid }}
        runAsNonRoot: true
      {{- with include "jupyterhub.imagePullSecrets" (dict "root" . "image" .Values.hub.image) }}
      imagePullSecrets: {{ . }}
      {{- end }}
      {{- with .Values.hub.initContainers }}
      initContainers:
        {{- . | toYaml | trimSuffix "\n" | nindent 8 }}
      {{- end }}
      containers:
        {{- with .Values.hub.extraContainers }}
        {{- . | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
        - name: hub
          image: {{ .Values.hub.image.name }}:{{ .Values.hub.image.tag }}
          {{- with .Values.hub.command }}
          command:
            {{- range . }}
            - {{ tpl . $ }}
            {{- end }}
          {{- end }}
          args:
            {{- /* .Values.hub.args overrides everything the Helm chart otherside would set */}}
            {{- if .Values.hub.args }}
            {{- range .Values.hub.args }}
            - {{ tpl . $ }}
            {{- end }}

            {{- /* .Values.hub.args didn't replace the default logic */}}
            {{- else }}
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            {{- if .Values.debug.enabled }}
            - --debug
            {{- end }}
            {{- /*
            We want to do automatic upgrades for sqlite-pvc by default, but
            allow users to opt out of that if they want. Users using their own
            db need to 'opt in' Go Templates treat nil and "" and false as
            'false', making this code complex. We can probably make this a
            one-liner, but doing combinations of boolean vars in go templates is
            very inelegant & hard to reason about.
            */}}
            {{- $upgradeType := typeOf .Values.hub.db.upgrade }}
            {{- if eq $upgradeType "bool" }}
            {{- /* .Values.hub.db.upgrade has been explicitly set to true or false */}}
            {{- if .Values.hub.db.upgrade }}
            - --upgrade-db
            {{- end }}
            {{- else if eq $upgradeType "<nil>" }}
            {{- /* .Values.hub.db.upgrade is nil */}}
            {{- if eq .Values.hub.db.type "sqlite-pvc" }}
            - --upgrade-db
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            {{- range $file_key, $file_details := .Values.hub.extraFiles }}
            - mountPath: {{ $file_details.mountPath }}
              subPath: {{ $file_key | quote }}
              name: files
            {{- end }}
            {{- with .Values.hub.extraVolumeMounts }}
            {{- . | toYaml | trimSuffix "\n" | nindent 12 }}
            {{- end }}
            {{- if eq .Values.hub.db.type "sqlite-pvc" }}
            - mountPath: /srv/jupyterhub
              name: pvc
              {{- with .Values.hub.db.pvc.subPath }}
              subPath: {{ . | quote }}
              {{- end }}
            {{- end }}
          {{- with .Values.hub.resources }}
          resources:
            {{- . | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- end }}
          {{- with .Values.hub.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          {{- /* Below is deprecation logic of .Values.hub.uid */}}
          {{- if .Values.hub.containerSecurityContext }}
          {{- $securityContext := dict }}
          {{- if hasKey .Values.hub "uid" }}
          {{- $_ := merge $securityContext (dict "runAsUser" .Values.hub.uid) }}
          {{- end }}
          {{- $_ := merge $securityContext .Values.hub.containerSecurityContext }}
          securityContext:
            {{- $securityContext | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- end }}
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: {{ template "jupyterhub.fullname" . }}
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "jupyterhub.fullname" . }}-hub-secret
                  key: JupyterHub.proxy_auth_token
            {{- if .Values.hub.db.password }}
            {{- if eq .Values.hub.db.type "mysql" }}
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ template "jupyterhub.fullname" . }}-hub-secret
                  key: hub.db.password
            {{- else if eq .Values.hub.db.type "postgres" }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "jupyterhub.fullname" . }}-hub-secret
                  key: hub.db.password
            {{- end }}
            {{- end }}
            {{- include "jupyterhub.extraEnv" .Values.hub.extraEnv | nindent 12 }}
          ports:
            - name: http
              containerPort: 8081
          {{- if .Values.hub.livenessProbe.enabled }}
          # livenessProbe notes:
          # We don't know how long hub database upgrades could take
          # so having a liveness probe could be a bit risky unless we put
          # a initialDelaySeconds value with long enough margin for that
          # to not be an issue. If it is too short, we could end up aborting
          # database upgrades midway or ending up in an infinite restart
          # loop.
          livenessProbe:
            initialDelaySeconds: {{ .Values.hub.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.hub.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.hub.livenessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.hub.baseUrl | trimSuffix "/" }}/hub/health
              port: http
          {{- end }}
          {{- if .Values.hub.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.hub.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.hub.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.hub.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.hub.readinessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.hub.baseUrl | trimSuffix "/" }}/hub/health
              port: http
          {{- end }}