apiVersion: v1
kind: ConfigMap
metadata:
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: hub
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  name: {{ include "codehub.hub.name" . }}-values
  namespace: {{ .Release.Namespace | quote }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  values.yaml: |
    Chart:
      Name: {{ .Chart.Name }}
      Version: {{ .Chart.Version }}
    Release:
      Name: {{ .Release.Name }}
      Namespace: {{ .Release.Namespace }}
      Service: {{ .Release.Service }}
    hub:
      config:
        JupyterHub:
          admin_access: true
          {{- if .Values.hub.auth.oauth.enabled }}
          authenticator_class: generic-oauth
          {{- else if .Values.hub.auth.gitlab.enabled }}
          authenticator_class: gitlab
          {{- else if .Values.hub.auth.dummy.enabled }}
          authenticator_class: dummy
          DummyAuthenticator:
          {{- if .Values.hub.auth.dummy.password }}
            password: {{ .Values.hub.auth.dummy.password | quote }}
          {{- else }}
            password: {{ randAlphaNum 10 | quote }}
          {{- end }}
          {{- end }}

          {{- if .Values.hub.auth.gitlab.enabled }}
          GitLabOAuthenticator:
            gitlab_url: {{ .Values.hub.auth.gitlab.gitlabUrl }}
            allowed_gitlab_groups: {{ .Values.hub.auth.gitlab.allowedGitlabGroups }}
            allowed_project_ids: {{ .Values.hub.auth.gitlab.allowedProjectIds }}
            client_id: {{ .Values.hub.auth.gitlab.clientId }}
            client_secret: {{ .Values.hub.auth.gitlab.clientSecret }}
          {{- end }}

          {{- if .Values.hub.auth.oauth.enabled }}
          GenericOAuthenticator:
            client_id: {{ .Values.hub.auth.oauth.clientId }}
            client_secret: {{ .Values.hub.auth.oauth.clientSecret }}
            oauth_callback_url: {{ .Values.hub.auth.oauth.oauthCallbackUrl }}
            authorize_url: {{ .Values.hub.auth.oauth.authorizeUrl }}
            token_url: {{ .Values.hub.auth.oauth.tokenUrl }}
            userdata_url: {{ .Values.hub.auth.oauth.userdataUrl }}
            login_service: {{ .Values.hub.auth.oauth.loginService }}
            username_key: {{ .Values.hub.auth.oauth.usernameKey }}
            userdata_params:
              state: state
            {{- if .Values.hub.auth.oauth.adminUsers }}
            adminUsers: {{- include "common.tplValues.render" ( dict "value" .Values.hub.auth.oauth.adminUsers "context" $ ) | nindent 10 }}
            {{- end }}
            {{- if .Values.hub.auth.oauth.adminGroups }}
            admin_groups: {{- include "common.tplValues.render" ( dict "value" .Values.hub.auth.adminGroups "context" $ ) | nindent 10 }}
            {{- end }}
            {{- if .Values.hub.auth.oauth.allowedGroups }}
            allowed_groups: {{- include "common.tplValues.render" ( dict "value" .Values.hub.auth.allowedGroups "context" $ ) | nindent 10 }}
            {{- end }}
            {{- if .Values.hub.auth.oauth.claimGroupsKey }}
            claim_groups_key: {{ .Values.hub.auth.oauth.claimGroupsKey }}
            {{- end }}
          {{- end }}
          {{- if and .Values.hub.auth.gitlab.enabled .Values.hub.auth.gitlab.adminUsers }}
          Authenticator:
            admin_users: {{- .Values.hub.auth.gitlab.adminUsers | toYaml | nindent 14 }}
          {{- end }}
          {{- if .Values.hub.auth.dummy.enabled }}
          Authenticator:
            admin_users:
              - {{ .Values.hub.auth.dummy.adminUser }}
          {{- end }}
      cookieSecret:
      concurrentSpawnLimit: 64
      consecutiveFailureLimit: 5
      activeServerLimit:
      db:
        type: postgres
        url: postgresql://{{ ternary .Values.postgresql.auth.username .Values.externalDatabase.user .Values.postgresql.enabled }}@{{ ternary (include "codehub.postgresql.fullname" .) .Values.externalDatabase.host .Values.postgresql.enabled }}:{{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled }}/{{ ternary .Values.postgresql.auth.database .Values.externalDatabase.database .Values.postgresql.enabled }}
      services: {}
      allowNamedServers: false
      namedServerLimitPerUser:
      {{- if .Values.hub.metrics.serviceMonitor.enabled }}
      authenticatePrometheus: {{ .Values.hub.metrics.authenticatePrometheus }}
      {{- end }}
      redirectToServer:
      shutdownOnLogout:
    singleuser:
      podNameTemplate: {{ include "common.names.fullname" . }}-codehub-{username}
      networkTools:
        image:
          name: {{ include "codehub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.auxiliaryImage "global" $) }}
          tag: {{ .Values.auxiliaryImage.tag }}
          digest: {{ .Values.auxiliaryImage.digest }}
          pullPolicy: {{ .Values.auxiliaryImage.pullPolicy }}
          pullSecrets: {{- include "codehub.imagePullSecrets.list" . | nindent 10 }}
      cloudMetadata:
        blockWithIptables: false
      events: true
      {{- if .extraEnvVars }}
      extraEnv: {{- include "common.tplvalues.render" ( dict "value" .extraEnvVars "context" $ ) | nindent 4 }}
      {{- end }}
      profileList:
        {{- range .Values.singleuser.profiles }}
        - description: "{{ .description }}"
          default: true
          display_name: "{{ .name }}"
          kubespawner_override:
            {{- if .command }}
            cmd: {{- include "common.tplvalues.render" ( dict "value" .command "context" $ ) | nindent 8 }}
            {{- end }}
            {{- if .args }}
            args: {{- include "common.tplvalues.render" ( dict "value" .args "context" $ ) | nindent 8 }}
            {{- end }}
            image: {{ include "codehub.hubconfiguration.imageEntry" ( dict "imageRoot" .image "global" $) }}:{{ .image.tag }}
            image_pull_policy: {{ .image.pullPolicy }}
            {{- if $.Values.global.imagePullSecrets }}
            image_pull_secrets: {{- include "codehub.imagePullSecrets.list" $ | nindent 14 }}
            {{- end }}
            {{- if .initContainers }}
            init_containers: {{- include "common.tplvalues.render" ( dict "value" .initContainers "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .sidecars }}
            extra_containers: {{- include "common.tplvalues.render" ( dict "value" .sidecars "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .containerSecurityContext.enabled }}
            container_security_context: {{- omit .containerSecurityContext "enabled" | toYaml | nindent 14 }}
            {{- end }}
            {{- if .podSecurityContext.enabled }}
            fsGid: {{ .podSecurityContext.fsGroup }}
            {{- end }}
            {{- /* We need to replace the Kubernetes memory/cpu terminology (e.g. 10Gi, 10Mi) with one compatible with Python (10G, 10M) */}}
            mem_guarantee: {{ regexReplaceAll "([A-Za-z])i" (default "" .resources.requests.memory) "${1}" }}
            mem_limit: {{ regexReplaceAll "([A-Za-z])i" (default "" .resources.limits.memory) "${1}" }}
            cpu_guarantee: {{ regexReplaceAll "([A-Za-z])i" (default "" .resources.requests.cpu) "${1}" }}
            cpu_limit: {{ regexReplaceAll "([A-Za-z])i" (default "" .resources.limits.cpu)  "${1}" }}
            {{- if .extraResources.requests }}
            extra_resource_guarantees: {{- include "common.tplvalues.render" ( dict "value" .extraResources.requests "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .extraResources.limits }}
            extra_resource_limits: {{- include "common.tplvalues.render" ( dict "value" .extraResources.limits "context" $ ) | nindent 14 }}
            {{- end }}
            common_labels:
              app.kubernetes.io/component: singleuser
              {{- include "common.labels.standard" $ | nindent 14 }}
              {{- if $.Values.commonLabels }}
              {{- include "common.tplvalues.render" ( dict "value" $.Values.commonLabels "context" $ ) | nindent 14 }}
              {{- end }}
            extra_labels:
              hub.jupyter.org/network-access-hub: "true"
              {{- if .podLabels }}
              {{- include "common.tplvalues.render" ( dict "value" .podLabels "context" $ ) | nindent 14 }}
              {{- end }}
            {{- if or $.Values.commonAnnotations .podAnnotations }}
            extra_annotations:
              {{- if $.Values.commonAnnotations }}
              {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 14 }}
              {{- end }}
              {{- if .podAnnotations }}
              {{- include "common.tplvalues.render" ( dict "value" .podAnnotations "context" $ ) | nindent 14 }}
              {{- end }}
            {{- end }}
            {{- if .lifecycleHooks }}
            lifecycle_hooks: {{- include "common.tplvalues.render" ( dict "value" .lifecycleHooks "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .lifecycleHooks }}
            priority_class_name: {{ .priorityClassName }}
            {{- end }}
            notebook_dir: {{ .notebookDir }}
            port: {{ .containerPort }}
            {{- if .extraVolumes }}
            volumes: {{- include "common.tplvalues.render" ( dict "value" .extraVolumes "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .extraVolumeMounts }}
            volumes_mounts: {{- include "common.tplvalues.render" ( dict "value" .extraVolumeMounts "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .tolerations }}
            tolerations: {{- include "common.tplvalues.render" ( dict "value" .tolerations "context" $) | nindent 14 }}
            {{- end }}
            {{- if .nodeSelector }}
            node_selector: {{- include "common.tplvalues.render" ( dict "value" .nodeSelector "context" $) | nindent 14 }}
            {{- end }}
            {{- if .extraEnvVars }}
            environment:
            {{ range .extraEnvVars }}
              {{ .name }}: {{ .value }}
            {{- end }}
            {{- end }}
            k8s_api_request_timeout: 10
        {{- end }}
      serviceAccountName: {{ template "codehub.singleuserServiceAccountName" . }}
      storage:
        {{- if .Values.singleuser.persistence.enabled }}
        type: dynamic
        {{- else }}
        type: none
        {{- end }}
        extraLabels:
          app.kubernetes.io/component: singleuser
          {{- include "common.labels.standard" . | nindent 10 }}
        capacity: {{ .Values.singleuser.persistence.size }}
        homeMountPath: /home/coder
        dynamic:
          {{ include "codehub.storage.class" (dict "persistence" .Values.singleuser.persistence "global" .Values.global) }}
          pvcNameTemplate: {{ include "common.names.fullname" . }}-claim-{username}{servername}
          volumeNameTemplate: {{ include "common.names.fullname" . }}-volume-{username}{servername}
          storageAccessModes: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.persistence.accessModes "context" $ ) | nindent 12 }}
      startTimeout: 300
      defaultUrl:
    cull:
      enabled: true
      users: false
      removeNamedServers: false
      timeout: 3600
      every: 600
      concurrency: 10
      maxAge: 0
